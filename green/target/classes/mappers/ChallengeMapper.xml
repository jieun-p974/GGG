<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ChallengeDAO">
	<!-- inserting Challenge -->
	<insert id="challengeWrite" parameterType="challenge">
		INSERT INTO challenge
		(chal_name, chal_ex, difficulty,chal_start_date,chal_end_date,chal_img,chal_img_addr, chal_check_su)
		VALUES (#{chal_name},#{chal_ex}, #{difficulty}, #{chal_start_date}, #{chal_end_date},#{chal_img},#{chal_img_addr},#{chal_check_su})
	</insert>
	
	<!-- challenge sinchung -->
 	<insert id="challengeSinchung" parameterType="hashmap">
		<!-- INSERT INTO mem_chal (chal_no, id) VALUES (#{chal_no}, #{userId}) -->
		INSERT INTO mem_chal (chal_no, id,apply_date) SELECT #{chal_no},#{userId},NOW() FROM dual
		WHERE NOT EXISTS
		(SELECT chal_no FROM mem_chal WHERE chal_no=#{chal_no} AND id=#{userId});
	</insert> 

	<!-- 챌린지 신청하면 회원 잔여 횟수 차감 -->
	<update id="minusTryNum">
		UPDATE member SET tryNum = tryNum-1 WHERE id=#{userId}
	</update>

	<!-- select one Challenge -->
	<select id="getChallengeDetail" parameterType="challenge" resultType="challenge">
		SELECT * FROM challenge WHERE chal_no = #{chal_no}
	</select>

	<!-- select Challenge List -->
	<select id="getChallengeList" parameterType="challenge" resultType="challenge">
		SELECT * FROM challenge ORDER BY chal_no
	</select>

	<!-- update challenge -->
 	<update id="updateChallenge" parameterType="challenge">
		UPDATE challenge SET 
		chal_name=#{chal_name},
		chal_start_date=#{chal_start_date},
		chal_end_date=#{chal_end_date},
		chal_ex=#{chal_ex},
		difficulty=#{difficulty},
		chal_check_su=#{chal_check_su}
		<if test='chal_img != null'>, chal_img = #{chal_img}, chal_img_addr = #{chal_img_addr}</if>
		WHERE chal_no=#{chal_no};
	</update>
	
	<!-- delete challenge -->
	<delete id="deleteChallenge">
		DELETE FROM challenge WHERE chal_no=#{chal_no}
	</delete>
	
<!-- 	<select id="selectMyChall" parameterType="string" resultType="challenge">
		SELECT c.chal_no AS chal_no, chal_name
		FROM mem_chal, challenge c
		WHERE id = #{id} AND completion_YN = 'N' AND mem_chal.chal_no = c.chal_no;
	</select> -->
	
	<!-- select challenge for certification  인증페이지에 정보 출력-->
<!-- 	<select id="getChallengeCheck" parameterType="hashmap" resultType="hashmap">
		SELECT cer_no, m.m_c_no AS m_c_no, chal.chal_name AS chal_name, cer_date, cer_img1_nn, cer_img1_addr, pass_YN
		FROM certification c, challenge chal, mem_chal m
		WHERE c.m_c_no = m.m_c_no AND m.chal_no = chal.chal_no AND id = '${id}' AND chal.chal_no=${chal_no}
	</select> -->
	
	<!-- select m_c_no -->
	<select id="getmcNo" parameterType="hashmap" resultType="hashmap">
		SELECT m_c_no FROM mem_chal WHERE chal_no=${chal_no} AND id = '${id}'
	</select>
	
	<!-- select my challenge ing-->
  	<resultMap type="challenge" id="myChall">
		<result column="chal_no" property="chal_no"/>
		<result column="chal_name" property="chal_name"/>
		<result column="id" property="id"/>
		<collection property="chall_list" ofType="challenge">
			<result column="chal_name" property="chal_name" jdbcType="VARCHAR" />
		</collection>
	</resultMap>
	
	<select id="myChallList" resultMap="myChall">
		SELECT c.chal_no as chal_no,chal_name, m_c_no
		FROM mem_chal, challenge c
		WHERE id = #{userId} AND completion_YN = 'N' AND success_YN = 'N' AND mem_chal.chal_no = c.chal_no;
	</select>
	
	<select id="completeList" resultMap="myChall">
		SELECT DISTINCT c.chal_no as chal_no,chal_name, m_c_no
		FROM mem_chal, challenge c
		WHERE mem_chal.chal_no = c.chal_no AND id = #{userId} AND (success_YN = 'Y' OR completion_YN='Y');
	</select>
	
	<!-- 인증 갯수 -->
	<select id="countCheck" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(m.m_c_no)
		FROM certification c, challenge chal, mem_chal m
		WHERE c.m_c_no = m.m_c_no
		AND m.chal_no = chal.chal_no AND chal.chal_no=${chal_no} AND id ='${id}' 
		AND pass_YN='Y'
		GROUP BY m.m_c_no
	</select>
	
	<!-- 인증하기 -->
	<insert id="insertCertification" parameterType="checkChallenge">
		INSERT INTO certification (m_c_no, cer_img1_nn, cer_img1_addr, pass_YN) 
		VALUE (#{m_c_no}, #{cer_img1_nn},#{cer_img1_addr},'N')
	</insert>
	
	<select id="redirectCheckPage" parameterType="checkChallenge" resultType="memChallenge">
		SELECT chal_no, id FROM mem_chal WHERE m_c_no = #{m_c_no}
	</select>
	
	<!-- 인증관리에 필요한 쿼리들 -->
	<select id="adminCerCheckList" resultType="checkChallenge">
		SELECT cer_no,c.m_c_no, cer_date, cer_img1_nn, cer_img1_addr, pass_YN 
		FROM certification c, mem_chal m WHERE pass_YN='N' AND chal_no=#{chal_no} 
		AND c.m_c_no = m.m_c_no AND success_YN='N'
	</select>
	
	<update id="updatePassYN">
		UPDATE certification SET pass_YN='Y'
		WHERE cer_no IN (
		<foreach collection="arr" item="a" separator="," >
		#{a}
		</foreach>
		)
	</update>
	
	<!-- chal_end_date 지나면 complete -->
	<update id="endDateCheck">
		UPDATE challenge SET completion_YN = 'Y' WHERE chal_no = #{chal_no}
	</update>
	
	<!-- 밑에 쿼리 3개에 인자 넘길 용으로 만든 select -->
	<select id="paramSql" resultType="hashmap">
		SELECT * FROM mem_chal m, certification c WHERE m.m_c_no = c.m_c_no AND 
		cer_no IN (
		<foreach collection="arr" item="a" separator="," >
		#{a}
		</foreach>
		)
	</select>
	
	<!-- pass_yn 갯수 -->
	<select id="passCount" resultType="Integer">
		SELECT COUNT(*),chal_no,id 
		FROM certification c, mem_chal m 
		WHERE chal_no=#{chal_no} AND c.m_c_no = m.m_c_no AND id=#{id} AND pass_YN ='Y'
	</select>
	
	<!-- 챌린지별 chal_check_su -->
	<select id="checkSu" resultType="Integer">
		SELECT chal_check_su FROM challenge WHERE chal_no=#{chal_no}
	</select>
	
	<!-- 인증 전부 다되면 success_yn칼럼 값 'y'로 수정하기 -->
	<update id="updateSuccess">
		UPDATE mem_chal SET success_YN = 'Y' WHERE chal_no = #{chal_no} AND id = #{id}
	</update>
	
	<!-- 포인트 지급하는 쿼리 -->
	<update id="givePoint">
		UPDATE member 
		SET remainder_point = remainder_point+ (100*(SELECT difficulty FROM challenge WHERE chal_no = #{chal_no})) 
		WHERE id = #{id}
	</update>
</mapper>