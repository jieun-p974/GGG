<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">

	<!-- insert,delete,update는 리턴타입 필요없음 -->

	<!-- id using check -->
	<select id="idCheck" parameterType="member" resultType="member">
		select * from member where id = #{id}
		<if test="password !=null">
			and password = #{password}
		</if>
	</select>

	<!-- sign up -->
	<insert id="memberInsert" parameterType="member">
		insert into member (id, password, name, email
		<if test='m_img != null'>, m_img, m_img_addr</if>
		)
		values (#{id}, #{password}, #{name}, #{email}
		<if test='m_img != null'>, #{m_img}, #{m_img_addr}</if>
		)
	</insert>

	<!-- login -->
	<select id="login" parameterType="member" resultType="member">
		select id, password FROM member where id=#{id} and password=#{password}
	</select>

	<!-- member info -->
	<select id="memberInfo" parameterType="member" resultType="member">
		select * from member where id = #{id}
	</select>

	<!-- member info edit -->
	<update id="memberUpdate" parameterType="member">
		update member set password = #{password}, tel = #{tel}
		<if test='m_img != null'>, m_img = #{m_img}, m_img_addr = #{m_img_addr} </if>
		where id = #{id}
	</update>

	<!-- search id -->
	<select id="searchID" parameterType="String" resultType="String">
		select id FROM member where email=#{email}
	</select>

	<!-- search pw -->
	<select id="searchPass" parameterType="String" resultType="String">
		select password FROM member where email=#{email}
	</select>

	<!-- 포인트 사용(기부시) -->
	<update id="goDona" parameterType="dona">
		UPDATE member SET remainder_point = remainder_point - #{don_point} WHERE id = #{id}
	</update>

	<!-- member card insert -->
	<insert id="cardInsert" parameterType="member">
		insert into mem_card (id, card_num, expire_date, CVC, card_company, pass_two)
		values(#{id}, #{card_num}, #{expire_date}, #{CVC}, #{card_company}, #{pass_two})
	</insert>
	
	<update id="cardYes" parameterType="member">
	update member set card_reg_YN = 'Y' where id=#{id}
	</update>
	
	<!-- member bank account insert -->
	<insert id="accountInsert" parameterType="member">
		insert into mem_account (id, acc_num, bank)
		values(#{id}, #{acc_num}, #{bank})
	</insert>
	
	<update id="accountYes" parameterType="member">
	update member set account_reg_YN = 'Y' where id=#{id}
	</update>
	
	<!-- member card delete -->
	<delete id="cardDelete" parameterType="member" >
	delete from mem_card where mem_card_no=#{mem_card_no}
	</delete>
	
	<update id="cardNo" parameterType="member">
	<![CDATA[
	update member set card_reg_YN = 'N'
	WHERE id=#{id} and ((SELECT count(*) FROM mem_card WHERE id=#{id}) < 1)
	]]>
	</update>

	<!-- member bank account delete -->
	<delete id="accountDelete" parameterType="member" >
	delete from mem_account where mem_acc_no=#{mem_acc_no}
	</delete>
	
	<update id="accountNo" parameterType="member">
	update member set account_reg_YN = 'N'
	WHERE id=#{id} and NOT EXISTS (SELECT * FROM mem_account WHERE id=#{id})	
	</update>

</mapper>